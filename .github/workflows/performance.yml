name: Performance Monitoring

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run performance tests weekly
    - cron: '0 6 * * 0'

jobs:
  # Job 1: Bundle Size Tracking
  bundle-size:
    name: Bundle Size Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        
      - name: Analyze bundle size
        uses: andresz1/size-limit-action@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          skip_step: install
          build_script: echo "Already built"
          
      - name: Generate bundle report
        run: |
          echo "## Bundle Size Report" > bundle_report.md
          echo "" >> bundle_report.md
          
          # Get current bundle sizes
          MAIN_JS_SIZE=$(du -h dist/assets/index-*.js | cut -f1)
          MAIN_CSS_SIZE=$(du -h dist/assets/index-*.css | cut -f1)
          TOTAL_SIZE=$(du -h dist/ | tail -1 | cut -f1)
          
          echo "| Asset | Size |" >> bundle_report.md
          echo "|-------|------|" >> bundle_report.md
          echo "| Main JS | $MAIN_JS_SIZE |" >> bundle_report.md
          echo "| Main CSS | $MAIN_CSS_SIZE |" >> bundle_report.md
          echo "| **Total** | **$TOTAL_SIZE** |" >> bundle_report.md
          echo "" >> bundle_report.md
          
          # List all chunks
          echo "### Detailed Breakdown" >> bundle_report.md
          echo "\`\`\`" >> bundle_report.md
          ls -lh dist/assets/ >> bundle_report.md
          echo "\`\`\`" >> bundle_report.md
          
      - name: Comment PR with bundle size
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('bundle_report.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });

  # Job 2: Performance Benchmarks
  performance:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        
      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli@0.12.x
        
      - name: Serve application
        run: |
          npx serve -s dist -l 3000 &
          sleep 5
        
      - name: Run Lighthouse CI
        run: |
          lhci autorun --upload.target=temporary-public-storage
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Performance test with custom script
        run: |
          # Create a simple performance test
          cat > perf_test.js << 'EOF'
          const puppeteer = require('puppeteer');
          
          (async () => {
            const browser = await puppeteer.launch({ headless: true });
            const page = await browser.newPage();
            
            // Measure page load time
            const startTime = Date.now();
            await page.goto('http://localhost:3000', { waitUntil: 'networkidle0' });
            const loadTime = Date.now() - startTime;
            
            console.log(`Page load time: ${loadTime}ms`);
            
            // Test peptide search performance
            const searchStart = Date.now();
            await page.type('input[placeholder*="search"], input[type="search"]', 'AAAAAAAAA');
            await page.waitForTimeout(1000);
            const searchTime = Date.now() - searchStart;
            
            console.log(`Search response time: ${searchTime}ms`);
            
            // Generate performance metrics
            const metrics = await page.metrics();
            console.log('Performance Metrics:', JSON.stringify(metrics, null, 2));
            
            await browser.close();
            
            // Check performance thresholds
            if (loadTime > 3000) {
              console.error('PERFORMANCE WARNING: Page load time exceeds 3 seconds');
              process.exit(1);
            }
            
            if (searchTime > 2000) {
              console.error('PERFORMANCE WARNING: Search response time exceeds 2 seconds');
              process.exit(1);
            }
          })();
          EOF
          
          # Install puppeteer and run test
          npm install puppeteer
          node perf_test.js

  # Job 3: Memory Usage Analysis
  memory-analysis:
    name: Memory Usage Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        
      - name: Analyze memory usage
        run: |
          # Create memory analysis script
          cat > memory_test.js << 'EOF'
          const puppeteer = require('puppeteer');
          
          (async () => {
            const browser = await puppeteer.launch({ 
              headless: true,
              args: ['--no-sandbox', '--disable-setuid-sandbox']
            });
            const page = await browser.newPage();
            
            await page.goto('http://localhost:3000');
            await page.waitForTimeout(2000);
            
            // Get initial memory usage
            const initialMetrics = await page.metrics();
            console.log('Initial JS Heap Size:', Math.round(initialMetrics.JSHeapUsedSize / 1024 / 1024), 'MB');
            
            // Simulate heavy usage
            for (let i = 0; i < 10; i++) {
              await page.reload();
              await page.waitForTimeout(1000);
            }
            
            // Check memory after heavy usage
            const finalMetrics = await page.metrics();
            console.log('Final JS Heap Size:', Math.round(finalMetrics.JSHeapUsedSize / 1024 / 1024), 'MB');
            
            const memoryIncrease = finalMetrics.JSHeapUsedSize - initialMetrics.JSHeapUsedSize;
            console.log('Memory increase:', Math.round(memoryIncrease / 1024 / 1024), 'MB');
            
            await browser.close();
            
            // Alert if memory usage is excessive
            if (finalMetrics.JSHeapUsedSize > 100 * 1024 * 1024) { // 100MB
              console.error('MEMORY WARNING: High memory usage detected');
              process.exit(1);
            }
          })();
          EOF
          
          # Start server and run memory test
          npx serve -s dist -l 3000 &
          sleep 5
          npm install puppeteer
          node memory_test.js